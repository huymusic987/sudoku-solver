import java.util.ArrayList;
import java.util.List;

public class RMITSudokuSolver {

    public static void main(String[] args) {
        List<int[][]> boards = getTestBoards();
        List<int[][]> solutions = getSolutionBoards();

        String[] names = { "Easy", "Medium", "Hard", "Evil" };
        int[] totalPuzzles = new int[4];
        int[] correctlySolved = new int[4];
        long[] totalSolveTime = new long[4];
        int[] maxPerGroup = { 10, 10, 10, 5 };

        for (int i = 0; i < boards.size(); i++) {
            int[][] board = boards.get(i);
            int[][] expected = solutions.get(i);

            int group = i / 10;
            if (group > 3)
                group = 3;

            totalPuzzles[group]++;

            long start = System.nanoTime();
            boolean solved = solveBoard(board);
            long end = System.nanoTime();

            if (solved && validateSolution(board, expected)) {
                correctlySolved[group]++;
                totalSolveTime[group] += (end - start);
            }
        }

        System.out.println("\n===== Difficulty Summary =====");
        for (int i = 0; i < 4; i++) {
            double avgTimeMs = correctlySolved[i] == 0 ? 0.0
                    : totalSolveTime[i] / (correctlySolved[i] * 1_000_000.0);
            System.out.printf("%s: %d/%d solved correctly. Avg time: %.4f ms\n",
                    names[i], correctlySolved[i], maxPerGroup[i], avgTimeMs);
        }
    }

    private static List<int[][]> getTestBoards() {
        List<int[][]> boards = new ArrayList<>();

        boards.add(new int[][] {
                { 0, 9, 8, 1, 5, 3, 0, 0, 4 },
                { 0, 0, 0, 0, 6, 4, 8, 9, 7 },
                { 4, 0, 2, 8, 9, 0, 1, 5, 0 },
                { 2, 0, 3, 6, 0, 5, 0, 7, 0 },
                { 5, 4, 0, 0, 7, 0, 3, 0, 2 },
                { 8, 0, 0, 0, 1, 0, 6, 4, 0 },
                { 0, 8, 7, 4, 0, 1, 5, 3, 0 },
                { 0, 3, 5, 0, 0, 9, 0, 2, 1 },
                { 1, 2, 0, 5, 0, 6, 7, 8, 9 }
        });

        boards.add(new int[][] {
                { 0, 0, 0, 3, 1, 5, 7, 9, 0 },
                { 1, 5, 0, 7, 8, 9, 0, 0, 2 },
                { 8, 0, 7, 0, 0, 6, 3, 0, 1 },
                { 0, 8, 0, 6, 5, 3, 1, 0, 0 },
                { 0, 0, 6, 0, 0, 2, 9, 8, 7 },
                { 4, 2, 0, 9, 0, 8, 6, 3, 0 },
                { 0, 7, 8, 5, 6, 0, 0, 1, 3 },
                { 6, 4, 0, 0, 3, 1, 8, 7, 0 },
                { 3, 0, 2, 0, 9, 0, 0, 4, 6 }
        });

        boards.add(new int[][] {
                { 5, 3, 0, 0, 0, 4, 9, 0, 8 },
                { 0, 2, 1, 9, 0, 7, 0, 0, 3 },
                { 7, 0, 0, 6, 3, 5, 0, 4, 0 },
                { 0, 0, 3, 7, 9, 8, 4, 2, 0 },
                { 2, 6, 4, 0, 5, 1, 0, 8, 0 },
                { 8, 9, 7, 0, 6, 2, 0, 1, 0 },
                { 9, 7, 8, 5, 4, 0, 2, 0, 0 },
                { 6, 4, 0, 0, 1, 3, 0, 0, 7 },
                { 0, 0, 2, 0, 7, 0, 5, 6, 4 }
        });

        boards.add(new int[][] {
                { 7, 8, 0, 3, 1, 2, 6, 0, 0 },
                { 4, 0, 6, 0, 7, 8, 0, 2, 0 },
                { 0, 2, 3, 6, 0, 0, 9, 0, 7 },
                { 3, 6, 0, 7, 0, 9, 4, 0, 2 },
                { 2, 0, 0, 5, 0, 6, 7, 9, 8 },
                { 0, 0, 7, 4, 2, 1, 5, 6, 3 },
                { 9, 0, 8, 0, 5, 0, 0, 4, 6 },
                { 5, 3, 1, 2, 6, 0, 0, 0, 0 },
                { 0, 0, 0, 8, 0, 7, 1, 0, 5 }
        });

        boards.add(new int[][] {
                { 8, 0, 0, 6, 2, 4, 0, 0, 3 },
                { 0, 3, 0, 9, 0, 0, 2, 6, 4 },
                { 2, 0, 6, 0, 0, 3, 8, 9, 7 },
                { 0, 0, 4, 1, 3, 0, 9, 7, 8 },
                { 0, 8, 0, 0, 6, 5, 0, 1, 0 },
                { 0, 2, 1, 7, 9, 0, 0, 0, 0 },
                { 0, 0, 2, 8, 7, 0, 0, 3, 6 },
                { 7, 9, 8, 3, 0, 6, 4, 2, 0 },
                { 5, 6, 3, 0, 4, 0, 7, 8, 9 }
        });

        boards.add(new int[][] {
                { 3, 5, 0, 2, 0, 6, 7, 8, 0 },
                { 0, 0, 2, 0, 7, 0, 3, 0, 0 },
                { 0, 9, 0, 1, 0, 5, 4, 2, 6 },
                { 0, 0, 0, 5, 6, 3, 9, 0, 8 },
                { 9, 8, 7, 4, 1, 0, 0, 5, 3 },
                { 0, 3, 5, 0, 9, 0, 1, 4, 0 },
                { 2, 1, 0, 6, 0, 4, 0, 9, 7 },
                { 8, 0, 0, 3, 0, 1, 5, 6, 0 },
                { 5, 4, 6, 0, 8, 7, 0, 3, 0 }
        });

        boards.add(new int[][] {
                { 2, 1, 4, 0, 0, 6, 8, 9, 7 },
                { 0, 0, 7, 0, 4, 0, 3, 6, 5 },
                { 3, 6, 0, 0, 7, 9, 0, 0, 4 },
                { 6, 0, 2, 9, 0, 7, 0, 3, 0 },
                { 9, 7, 8, 5, 0, 0, 0, 0, 2 },
                { 0, 3, 1, 6, 0, 4, 9, 7, 0 },
                { 7, 8, 0, 1, 3, 0, 4, 0, 0 },
                { 0, 2, 3, 4, 0, 5, 7, 0, 0 },
                { 4, 0, 6, 7, 0, 0, 1, 2, 3 }
        });

        boards.add(new int[][] {
                { 0, 8, 0, 5, 3, 1, 0, 0, 2 },
                { 0, 2, 0, 9, 7, 0, 0, 0, 1 },
                { 3, 1, 5, 6, 4, 2, 0, 0, 0 },
                { 2, 3, 1, 4, 5, 0, 0, 8, 9 },
                { 8, 9, 0, 0, 0, 3, 4, 5, 0 },
                { 0, 6, 4, 0, 0, 9, 1, 2, 0 },
                { 1, 4, 2, 0, 6, 0, 0, 9, 7 },
                { 9, 0, 8, 0, 1, 4, 3, 0, 5 },
                { 0, 5, 0, 0, 9, 7, 2, 1, 0 }
        });

        boards.add(new int[][] {
                { 0, 7, 8, 1, 3, 0, 5, 0, 4 },
                { 6, 0, 0, 7, 9, 8, 2, 0, 1 },
                { 0, 1, 2, 4, 6, 0, 8, 9, 0 },
                { 4, 2, 1, 0, 5, 6, 9, 0, 0 },
                { 5, 0, 6, 8, 0, 0, 0, 4, 2 },
                { 7, 8, 0, 2, 0, 1, 6, 0, 3 },
                { 2, 0, 4, 9, 0, 7, 0, 0, 0 },
                { 0, 0, 7, 0, 1, 3, 4, 2, 6 },
                { 0, 5, 0, 0, 0, 4, 0, 8, 9 }
        });

        boards.add(new int[][] {
                { 8, 9, 7, 0, 0, 2, 0, 3, 0 },
                { 0, 6, 0, 3, 0, 1, 8, 7, 9 },
                { 0, 5, 0, 0, 0, 8, 2, 4, 0 },
                { 0, 0, 1, 9, 8, 7, 5, 0, 3 },
                { 0, 3, 6, 0, 0, 4, 7, 0, 8 },
                { 0, 8, 9, 6, 3, 0, 4, 1, 0 },
                { 3, 0, 2, 8, 7, 9, 6, 0, 4 },
                { 6, 4, 0, 2, 0, 3, 0, 0, 0 },
                { 0, 7, 8, 5, 4, 0, 3, 0, 1 }
        });

        boards.add(new int[][] {
                { 5, 0, 3, 7, 0, 9, 0, 0, 2 },
                { 9, 0, 0, 0, 2, 0, 5, 0, 1 },
                { 6, 0, 0, 3, 1, 5, 0, 7, 8 },
                { 0, 0, 5, 2, 3, 1, 7, 0, 0 },
                { 0, 3, 2, 0, 9, 7, 4, 5, 0 },
                { 7, 9, 8, 5, 6, 0, 0, 2, 0 },
                { 0, 4, 0, 0, 7, 0, 0, 6, 0 },
                { 0, 5, 0, 1, 0, 2, 8, 9, 7 },
                { 8, 0, 9, 6, 5, 3, 0, 1, 0 }
        });

        boards.add(new int[][] {
                { 1, 0, 3, 9, 7, 8, 5, 0, 0 },
                { 0, 0, 6, 3, 0, 2, 0, 7, 0 },
                { 0, 8, 9, 0, 0, 5, 0, 1, 3 },
                { 3, 6, 0, 4, 0, 0, 0, 8, 0 },
                { 8, 0, 7, 5, 3, 0, 1, 2, 4 },
                { 0, 0, 0, 7, 8, 9, 0, 3, 0 },
                { 0, 7, 8, 0, 6, 0, 0, 0, 1 },
                { 6, 4, 0, 0, 5, 3, 0, 0, 8 },
                { 5, 0, 1, 0, 9, 0, 4, 0, 0 }
        });

        boards.add(new int[][] {
                { 3, 0, 0, 4, 6, 2, 9, 0, 0 },
                { 4, 2, 0, 0, 0, 8, 0, 0, 0 },
                { 0, 8, 0, 3, 5, 0, 6, 4, 0 },
                { 0, 0, 2, 6, 0, 5, 8, 9, 7 },
                { 9, 7, 8, 0, 0, 4, 0, 0, 5 },
                { 0, 5, 0, 9, 8, 0, 2, 1, 0 },
                { 5, 0, 4, 8, 0, 0, 0, 2, 3 },
                { 8, 9, 7, 0, 1, 0, 0, 5, 0 },
                { 0, 0, 1, 5, 4, 6, 0, 0, 0 }
        });

        boards.add(new int[][] {
                { 1, 2, 0, 6, 0, 4, 0, 7, 9 },
                { 4, 5, 6, 9, 0, 7, 0, 1, 0 },
                { 7, 8, 9, 0, 2, 0, 0, 4, 6 },
                { 0, 0, 1, 0, 4, 0, 7, 0, 0 },
                { 6, 0, 0, 8, 0, 9, 3, 0, 0 },
                { 0, 7, 8, 0, 3, 5, 0, 6, 2 },
                { 8, 0, 7, 0, 0, 2, 6, 0, 5 },
                { 0, 6, 5, 7, 0, 8, 1, 0, 0 },
                { 2, 1, 0, 5, 0, 0, 9, 0, 0 }
        });

        boards.add(new int[][] {
                { 0, 0, 0, 0, 1, 0, 8, 9, 7 },
                { 0, 8, 7, 6, 0, 4, 1, 5, 0 },
                { 0, 1, 3, 0, 8, 7, 0, 6, 0 },
                { 4, 0, 5, 0, 0, 0, 9, 0, 8 },
                { 1, 3, 0, 0, 9, 8, 0, 4, 0 },
                { 7, 0, 8, 0, 0, 0, 3, 0, 2 },
                { 2, 0, 1, 8, 7, 9, 5, 0, 0 },
                { 0, 0, 9, 3, 5, 6, 0, 2, 1 },
                { 3, 0, 0, 2, 0, 0, 7, 0, 0 }
        });

        boards.add(new int[][] {
                { 0, 0, 3, 9, 8, 0, 0, 2, 0 },
                { 9, 7, 0, 1, 2, 4, 5, 3, 0 },
                { 1, 4, 2, 0, 3, 5, 7, 0, 9 },
                { 3, 0, 5, 0, 0, 2, 0, 9, 7 },
                { 4, 2, 0, 7, 9, 8, 1, 0, 0 },
                { 7, 0, 9, 0, 5, 0, 2, 0, 4 },
                { 2, 3, 0, 5, 4, 0, 0, 0, 0 },
                { 0, 0, 7, 0, 0, 0, 6, 4, 0 },
                { 5, 0, 0, 8, 0, 9, 0, 1, 2 }
        });

        boards.add(new int[][] {
                { 4, 0, 5, 0, 8, 9, 0, 0, 0 },
                { 1, 3, 2, 0, 0, 6, 7, 0, 0 },
                { 0, 9, 0, 0, 2, 3, 4, 0, 6 },
                { 0, 7, 9, 2, 0, 0, 3, 6, 0 },
                { 0, 5, 0, 8, 9, 0, 0, 1, 4 },
                { 0, 0, 1, 3, 0, 5, 8, 0, 0 },
                { 9, 0, 7, 0, 3, 1, 6, 4, 2 },
                { 6, 0, 4, 0, 0, 0, 0, 3, 1 },
                { 5, 1, 3, 0, 4, 2, 0, 7, 0 }
        });

        boards.add(new int[][] {
                { 0, 0, 5, 6, 2, 0, 7, 9, 0 },
                { 4, 0, 6, 0, 8, 0, 0, 0, 1 },
                { 7, 8, 0, 5, 0, 0, 4, 6, 0 },
                { 8, 0, 7, 1, 3, 2, 0, 4, 6 },
                { 0, 3, 0, 0, 0, 5, 8, 0, 9 },
                { 0, 6, 4, 7, 9, 0, 2, 0, 0 },
                { 1, 0, 0, 3, 0, 6, 0, 8, 7 },
                { 9, 7, 8, 0, 4, 0, 0, 3, 0 },
                { 0, 5, 0, 0, 0, 9, 0, 2, 0 }
        });

        boards.add(new int[][] {
                { 1, 0, 0, 0, 9, 0, 0, 4, 5 },
                { 7, 9, 8, 0, 6, 0, 3, 0, 0 },
                { 4, 6, 0, 2, 3, 0, 9, 0, 0 },
                { 6, 0, 4, 3, 1, 5, 8, 0, 0 },
                { 0, 0, 3, 7, 0, 0, 2, 6, 0 },
                { 0, 8, 7, 4, 2, 0, 0, 5, 0 },
                { 8, 0, 0, 6, 0, 0, 4, 2, 1 },
                { 0, 4, 0, 9, 7, 8, 0, 0, 6 },
                { 0, 5, 6, 0, 0, 2, 0, 0, 9 },
        });

        boards.add(new int[][] {
                { 0, 6, 0, 0, 0, 9, 2, 0, 1 },
                { 0, 3, 0, 0, 5, 6, 0, 0, 7 },
                { 8, 9, 7, 0, 0, 3, 0, 6, 0 },
                { 0, 5, 3, 0, 9, 7, 1, 0, 2 },
                { 9, 0, 8, 0, 1, 4, 0, 0, 3 },
                { 1, 0, 0, 0, 6, 5, 9, 7, 0 },
                { 7, 0, 9, 5, 3, 1, 0, 2, 0 },
                { 0, 0, 5, 6, 0, 0, 7, 8, 0 },
                { 4, 2, 0, 0, 7, 0, 0, 1, 5 },
        });

        boards.add(new int[][] {
                { 3, 1, 0, 0, 0, 0, 8, 0, 9 },
                { 9, 0, 0, 2, 0, 3, 5, 4, 0 },
                { 0, 0, 5, 8, 7, 9, 2, 0, 3 },
                { 8, 0, 0, 0, 5, 0, 0, 6, 2 },
                { 2, 0, 4, 7, 9, 8, 0, 5, 0 },
                { 0, 0, 0, 4, 6, 0, 7, 9, 8 },
                { 0, 2, 1, 0, 3, 5, 9, 0, 7 },
                { 0, 8, 9, 0, 0, 4, 0, 0, 5 },
                { 0, 3, 0, 9, 0, 7, 1, 0, 0 }
        });
        boards.add(new int[][] {
                { 0, 9, 7, 0, 6, 0, 0, 2, 0 },
                { 0, 6, 4, 1, 3, 0, 0, 0, 0 },
                { 2, 0, 0, 0, 0, 8, 6, 5, 4 },
                { 0, 0, 0, 6, 2, 4, 1, 3, 0 },
                { 0, 2, 0, 0, 1, 0, 8, 0, 9 },
                { 3, 1, 5, 9, 0, 0, 0, 0, 0 },
                { 9, 7, 0, 3, 0, 6, 0, 0, 0 },
                { 6, 0, 0, 2, 0, 0, 0, 9, 8 },
                { 0, 0, 2, 8, 0, 9, 5, 6, 0 }
        });
        boards.add(new int[][] {
                { 8, 0, 0, 5, 1, 0, 4, 6, 0 },
                { 2, 4, 0, 0, 8, 0, 3, 5, 0 },
                { 1, 0, 0, 6, 2, 0, 0, 0, 0 },
                { 4, 0, 0, 0, 5, 0, 0, 8, 7 },
                { 7, 0, 0, 2, 0, 1, 6, 3, 0 },
                { 0, 0, 3, 0, 0, 9, 1, 0, 4 },
                { 0, 5, 4, 7, 0, 0, 0, 0, 3 },
                { 0, 0, 7, 0, 3, 2, 0, 0, 6 },
                { 0, 2, 0, 0, 0, 0, 8, 0, 9 }
        });
        boards.add(new int[][] {
                { 5, 0, 0, 0, 0, 0, 8, 7, 9 },
                { 0, 3, 1, 0, 8, 9, 0, 0, 0 },
                { 0, 0, 7, 4, 0, 0, 2, 0, 3 },
                { 0, 0, 0, 0, 1, 0, 0, 8, 7 },
                { 0, 4, 0, 0, 9, 7, 0, 0, 5 },
                { 9, 7, 0, 3, 0, 5, 0, 0, 4 },
                { 3, 0, 5, 9, 0, 0, 0, 6, 0 },
                { 4, 2, 6, 0, 0, 0, 7, 0, 0 },
                { 0, 0, 0, 6, 4, 2, 0, 5, 1 }
        });
        boards.add(new int[][] {
                { 2, 1, 3, 0, 0, 0, 5, 6, 0 },
                { 5, 4, 0, 2, 0, 3, 0, 0, 0 },
                { 0, 0, 0, 5, 4, 6, 2, 0, 0 },
                { 9, 0, 0, 0, 3, 5, 1, 0, 2 },
                { 1, 0, 0, 0, 0, 7, 0, 5, 3 },
                { 6, 0, 0, 0, 2, 4, 0, 7, 0 },
                { 0, 0, 8, 4, 0, 0, 0, 0, 0 },
                { 0, 6, 2, 0, 0, 0, 0, 8, 9 },
                { 0, 0, 1, 7, 9, 0, 4, 2, 6 }
        });
        boards.add(new int[][] {
                { 6, 5, 4, 0, 0, 1, 0, 0, 9 },
                { 0, 0, 0, 0, 0, 4, 2, 1, 3 },
                { 3, 0, 0, 8, 0, 7, 0, 0, 0 },
                { 0, 0, 3, 0, 0, 0, 9, 8, 0 },
                { 0, 1, 0, 9, 7, 8, 6, 0, 0 },
                { 0, 9, 8, 0, 5, 0, 1, 2, 4 },
                { 0, 7, 9, 0, 2, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 4, 6, 2 },
                { 0, 4, 6, 3, 0, 5, 0, 0, 0 }
        });
        boards.add(new int[][] {
                { 0, 0, 0, 1, 0, 2, 0, 0, 5 },
                { 0, 1, 0, 0, 0, 0, 9, 0, 0 },
                { 5, 4, 6, 0, 0, 8, 3, 0, 0 },
                { 0, 0, 1, 0, 2, 4, 8, 9, 0 },
                { 0, 6, 2, 0, 0, 0, 1, 0, 3 },
                { 0, 0, 8, 0, 1, 3, 0, 6, 4 },
                { 9, 8, 7, 0, 0, 0, 0, 3, 0 },
                { 0, 0, 0, 3, 5, 6, 0, 0, 0 },
                { 0, 3, 0, 8, 7, 0, 4, 0, 1 }
        });
        boards.add(new int[][] {
                { 8, 7, 0, 0, 0, 0, 0, 0, 3 },
                { 0, 3, 0, 9, 0, 7, 2, 6, 0 },
                { 0, 0, 0, 5, 1, 3, 0, 9, 0 },
                { 0, 0, 0, 3, 5, 6, 4, 0, 0 },
                { 4, 1, 2, 0, 0, 0, 0, 0, 6 },
                { 0, 6, 3, 0, 0, 1, 7, 8, 0 },
                { 0, 0, 4, 0, 3, 0, 9, 0, 8 },
                { 3, 0, 1, 7, 9, 0, 0, 0, 5 },
                { 9, 8, 0, 0, 6, 0, 0, 1, 0 }
        });
        boards.add(new int[][] {
                { 9, 8, 0, 0, 0, 0, 4, 6, 0 },
                { 0, 0, 0, 0, 0, 4, 0, 9, 0 },
                { 6, 0, 0, 0, 8, 0, 1, 3, 2 },
                { 0, 7, 0, 1, 3, 5, 0, 0, 0 },
                { 2, 0, 6, 0, 0, 0, 0, 1, 3 },
                { 1, 0, 0, 2, 4, 0, 0, 8, 7 },
                { 4, 1, 2, 5, 0, 3, 0, 0, 0 },
                { 0, 0, 3, 7, 9, 8, 0, 0, 1 },
                { 0, 0, 8, 0, 1, 0, 0, 0, 6 }
        });
        boards.add(new int[][] {
                { 3, 0, 0, 0, 0, 7, 4, 1, 0 },
                { 2, 0, 4, 6, 0, 0, 7, 0, 0 },
                { 0, 0, 7, 1, 0, 0, 0, 0, 3 },
                { 9, 0, 0, 0, 5, 0, 0, 4, 6 },
                { 0, 4, 0, 7, 9, 0, 1, 0, 0 },
                { 5, 3, 0, 0, 0, 2, 0, 0, 0 },
                { 0, 5, 0, 0, 7, 9, 3, 0, 1 },
                { 0, 8, 9, 0, 1, 3, 0, 5, 0 },
                { 0, 2, 3, 0, 0, 0, 0, 8, 7 }
        });

        boards.add(new int[][] {
                { 7, 0, 0, 0, 0, 0, 2, 0, 4 },
                { 0, 0, 0, 0, 0, 6, 8, 0, 7 },
                { 0, 2, 6, 0, 0, 9, 0, 0, 0 },
                { 0, 6, 0, 0, 8, 0, 0, 0, 0 },
                { 8, 0, 0, 3, 0, 1, 0, 0, 5 },
                { 2, 3, 0, 0, 0, 0, 0, 7, 8 },
                { 0, 0, 3, 0, 9, 0, 4, 2, 0 },
                { 0, 0, 8, 0, 1, 0, 0, 3, 6 },
                { 0, 4, 2, 5, 0, 0, 0, 0, 0 }
        });

        boards.add(new int[][] {
                { 0, 0, 9, 4, 0, 2, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 9, 0, 8 },
                { 0, 0, 0, 7, 0, 0, 1, 4, 0 },
                { 7, 9, 0, 0, 0, 0, 0, 6, 0 },
                { 0, 3, 0, 0, 5, 0, 0, 0, 0 },
                { 0, 0, 5, 0, 8, 0, 0, 0, 1 },
                { 0, 0, 7, 0, 3, 5, 0, 2, 6 },
                { 5, 0, 0, 0, 4, 6, 0, 8, 0 },
                { 6, 2, 0, 0, 0, 0, 0, 0, 0 }
        });

        boards.add(new int[][] {
                { 5, 0, 0, 0, 2, 1, 0, 0, 0 },
                { 0, 0, 8, 0, 0, 0, 2, 4, 1 },
                { 0, 1, 2, 0, 0, 9, 3, 0, 0 },
                { 0, 0, 0, 0, 4, 5, 1, 3, 0 },
                { 0, 2, 1, 9, 7, 0, 0, 6, 0 },
                { 6, 5, 0, 0, 1, 0, 0, 9, 0 },
                { 2, 0, 0, 0, 5, 3, 9, 0, 7 },
                { 0, 3, 5, 8, 0, 0, 0, 0, 4 },
                { 0, 7, 0, 2, 0, 0, 0, 0, 3 }
        });

        boards.add(new int[][] {
                { 9, 7, 0, 0, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 8, 4, 0, 5 },
                { 6, 0, 0, 0, 0, 2, 0, 9, 0 },
                { 2, 6, 0, 5, 0, 0, 0, 0, 0 },
                { 0, 0, 7, 6, 0, 0, 5, 1, 0 },
                { 0, 0, 3, 9, 0, 0, 6, 0, 4 },
                { 0, 0, 9, 3, 5, 0, 0, 0, 1 },
                { 0, 3, 0, 0, 4, 0, 0, 7, 9 },
                { 0, 2, 1, 0, 7, 0, 0, 0, 0 }
        });

        boards.add(new int[][] {
                { 6, 0, 0, 7, 9, 8, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 2, 8, 7, 0 },
                { 9, 8, 0, 0, 0, 0, 0, 4, 0 },
                { 1, 0, 0, 5, 0, 0, 0, 0, 0 },
                { 0, 0, 5, 8, 0, 9, 0, 0, 0 },
                { 7, 0, 8, 0, 0, 0, 6, 0, 4 },
                { 0, 0, 9, 0, 2, 0, 5, 0, 3 },
                { 0, 4, 1, 0, 3, 0, 0, 0, 8 },
                { 0, 5, 0, 0, 8, 0, 0, 1, 2 }
        });

        return boards;
    }

    public static List<int[][]> getSolutionBoards() {
        List<int[][]> solutions = new ArrayList<>();

        solutions.add(new int[][] {
                { 7, 9, 8, 1, 5, 3, 2, 6, 4 },
                { 3, 5, 1, 2, 6, 4, 8, 9, 7 },
                { 4, 6, 2, 8, 9, 7, 1, 5, 3 },
                { 2, 1, 3, 6, 4, 5, 9, 7, 8 },
                { 5, 4, 6, 9, 7, 8, 3, 1, 2 },
                { 8, 7, 9, 3, 1, 2, 6, 4, 5 },
                { 9, 8, 7, 4, 2, 1, 5, 3, 6 },
                { 6, 3, 5, 7, 8, 9, 4, 2, 1 },
                { 1, 2, 4, 5, 3, 6, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 2, 6, 4, 3, 1, 5, 7, 9, 8 },
                { 1, 5, 3, 7, 8, 9, 4, 6, 2 },
                { 8, 9, 7, 4, 2, 6, 3, 5, 1 },
                { 7, 8, 9, 6, 5, 3, 1, 2, 4 },
                { 5, 3, 6, 1, 4, 2, 9, 8, 7 },
                { 4, 2, 1, 9, 7, 8, 6, 3, 5 },
                { 9, 7, 8, 5, 6, 4, 2, 1, 3 },
                { 6, 4, 5, 2, 3, 1, 8, 7, 9 },
                { 3, 1, 2, 8, 9, 7, 5, 4, 6 }
        });

        solutions.add(new int[][] {
                { 5, 3, 6, 1, 2, 4, 9, 7, 8 },
                { 4, 2, 1, 9, 8, 7, 6, 5, 3 },
                { 7, 8, 9, 6, 3, 5, 1, 4, 2 },
                { 1, 5, 3, 7, 9, 8, 4, 2, 6 },
                { 2, 6, 4, 3, 5, 1, 7, 8, 9 },
                { 8, 9, 7, 4, 6, 2, 3, 1, 5 },
                { 9, 7, 8, 5, 4, 6, 2, 3, 1 },
                { 6, 4, 5, 2, 1, 3, 8, 9, 7 },
                { 3, 1, 2, 8, 7, 9, 5, 6, 4 }
        });

        solutions.add(new int[][] {
                { 7, 8, 9, 3, 1, 2, 6, 5, 4 },
                { 4, 5, 6, 9, 7, 8, 3, 2, 1 },
                { 1, 2, 3, 6, 4, 5, 9, 8, 7 },
                { 3, 6, 5, 7, 8, 9, 4, 1, 2 },
                { 2, 1, 4, 5, 3, 6, 7, 9, 8 },
                { 8, 9, 7, 4, 2, 1, 5, 6, 3 },
                { 9, 7, 8, 1, 5, 3, 2, 4, 6 },
                { 5, 3, 1, 2, 6, 4, 8, 7, 9 },
                { 6, 4, 2, 8, 9, 7, 1, 3, 5 }
        });

        solutions.add(new int[][] {
                { 8, 7, 9, 6, 2, 4, 1, 5, 3 },
                { 1, 3, 5, 9, 8, 7, 2, 6, 4 },
                { 2, 4, 6, 5, 1, 3, 8, 9, 7 },
                { 6, 5, 4, 1, 3, 2, 9, 7, 8 },
                { 9, 8, 7, 4, 6, 5, 3, 1, 2 },
                { 3, 2, 1, 7, 9, 8, 6, 4, 5 },
                { 4, 1, 2, 8, 7, 9, 5, 3, 6 },
                { 7, 9, 8, 3, 5, 6, 4, 2, 1 },
                { 5, 6, 3, 2, 4, 1, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 3, 5, 1, 2, 4, 6, 7, 8, 9 },
                { 4, 6, 2, 8, 7, 9, 3, 1, 5 },
                { 7, 9, 8, 1, 3, 5, 4, 2, 6 },
                { 1, 2, 4, 5, 6, 3, 9, 7, 8 },
                { 9, 8, 7, 4, 1, 2, 6, 5, 3 },
                { 6, 3, 5, 7, 9, 8, 1, 4, 2 },
                { 2, 1, 3, 6, 5, 4, 8, 9, 7 },
                { 8, 7, 9, 3, 2, 1, 5, 6, 4 },
                { 5, 4, 6, 9, 8, 7, 2, 3, 1 }
        });

        solutions.add(new int[][] {
                { 2, 1, 4, 3, 5, 6, 8, 9, 7 },
                { 8, 9, 7, 2, 4, 1, 3, 6, 5 },
                { 3, 6, 5, 8, 7, 9, 2, 1, 4 },
                { 6, 4, 2, 9, 8, 7, 5, 3, 1 },
                { 9, 7, 8, 5, 1, 3, 6, 4, 2 },
                { 5, 3, 1, 6, 2, 4, 9, 7, 8 },
                { 7, 8, 9, 1, 3, 2, 4, 5, 6 },
                { 1, 2, 3, 4, 6, 5, 7, 8, 9 },
                { 4, 5, 6, 7, 9, 8, 1, 2, 3 }
        });

        solutions.add(new int[][] {
                { 7, 8, 9, 5, 3, 1, 6, 4, 2 },
                { 4, 2, 6, 9, 7, 8, 5, 3, 1 },
                { 3, 1, 5, 6, 4, 2, 9, 7, 8 },
                { 2, 3, 1, 4, 5, 6, 7, 8, 9 },
                { 8, 9, 7, 1, 2, 3, 4, 5, 6 },
                { 5, 6, 4, 7, 8, 9, 1, 2, 3 },
                { 1, 4, 2, 3, 6, 5, 8, 9, 7 },
                { 9, 7, 8, 2, 1, 4, 3, 6, 5 },
                { 6, 5, 3, 8, 9, 7, 2, 1, 4 }
        });

        solutions.add(new int[][] {
                { 9, 7, 8, 1, 3, 2, 5, 6, 4 },
                { 6, 4, 5, 7, 9, 8, 2, 3, 1 },
                { 3, 1, 2, 4, 6, 5, 8, 9, 7 },
                { 4, 2, 1, 3, 5, 6, 9, 7, 8 },
                { 5, 3, 6, 8, 7, 9, 1, 4, 2 },
                { 7, 8, 9, 2, 4, 1, 6, 5, 3 },
                { 2, 6, 4, 9, 8, 7, 3, 1, 5 },
                { 8, 9, 7, 5, 1, 3, 4, 2, 6 },
                { 1, 5, 3, 6, 2, 4, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 8, 9, 7, 4, 6, 2, 1, 3, 5 },
                { 2, 6, 4, 3, 5, 1, 8, 7, 9 },
                { 1, 5, 3, 7, 9, 8, 2, 4, 6 },
                { 4, 2, 1, 9, 8, 7, 5, 6, 3 },
                { 5, 3, 6, 1, 2, 4, 7, 9, 8 },
                { 7, 8, 9, 6, 3, 5, 4, 1, 2 },
                { 3, 1, 2, 8, 7, 9, 6, 5, 4 },
                { 6, 4, 5, 2, 1, 3, 9, 8, 7 },
                { 9, 7, 8, 5, 4, 6, 3, 2, 1 }
        });

        solutions.add(new int[][] {
                { 5, 1, 3, 7, 8, 9, 6, 4, 2 },
                { 9, 8, 7, 4, 2, 6, 5, 3, 1 },
                { 6, 2, 4, 3, 1, 5, 9, 7, 8 },
                { 4, 6, 5, 2, 3, 1, 7, 8, 9 },
                { 1, 3, 2, 8, 9, 7, 4, 5, 6 },
                { 7, 9, 8, 5, 6, 4, 1, 2, 3 },
                { 2, 4, 1, 9, 7, 8, 3, 6, 5 },
                { 3, 5, 6, 1, 4, 2, 8, 9, 7 },
                { 8, 7, 9, 6, 5, 3, 2, 1, 4 }
        });

        solutions.add(new int[][] {
                { 1, 2, 3, 9, 7, 8, 5, 4, 6 },
                { 4, 5, 6, 3, 1, 2, 8, 7, 9 },
                { 7, 8, 9, 6, 4, 5, 2, 1, 3 },
                { 3, 6, 5, 4, 2, 1, 9, 8, 7 },
                { 8, 9, 7, 5, 3, 6, 1, 2, 4 },
                { 2, 1, 4, 7, 8, 9, 6, 3, 5 },
                { 9, 7, 8, 2, 6, 4, 3, 5, 1 },
                { 6, 4, 2, 1, 5, 3, 7, 9, 8 },
                { 5, 3, 1, 8, 9, 7, 4, 6, 2 }
        });

        solutions.add(new int[][] {
                { 3, 1, 5, 4, 6, 2, 9, 7, 8 },
                { 4, 2, 6, 7, 9, 8, 5, 3, 1 },
                { 7, 8, 9, 3, 5, 1, 6, 4, 2 },
                { 1, 4, 2, 6, 3, 5, 8, 9, 7 },
                { 9, 7, 8, 1, 2, 4, 3, 6, 5 },
                { 6, 5, 3, 9, 8, 7, 2, 1, 4 },
                { 5, 6, 4, 8, 7, 9, 1, 2, 3 },
                { 8, 9, 7, 2, 1, 3, 4, 5, 6 },
                { 2, 3, 1, 5, 4, 6, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 1, 2, 3, 6, 5, 4, 8, 7, 9 },
                { 4, 5, 6, 9, 8, 7, 2, 1, 3 },
                { 7, 8, 9, 3, 2, 1, 5, 4, 6 },
                { 5, 3, 1, 2, 4, 6, 7, 9, 8 },
                { 6, 4, 2, 8, 7, 9, 3, 5, 1 },
                { 9, 7, 8, 1, 3, 5, 4, 6, 2 },
                { 8, 9, 7, 4, 1, 2, 6, 3, 5 },
                { 3, 6, 5, 7, 9, 8, 1, 2, 4 },
                { 2, 1, 4, 5, 6, 3, 9, 8, 7 }
        });

        solutions.add(new int[][] {
                { 6, 2, 4, 5, 1, 3, 8, 9, 7 },
                { 9, 8, 7, 6, 2, 4, 1, 5, 3 },
                { 5, 1, 3, 9, 8, 7, 2, 6, 4 },
                { 4, 6, 5, 1, 3, 2, 9, 7, 8 },
                { 1, 3, 2, 7, 9, 8, 6, 4, 5 },
                { 7, 9, 8, 4, 6, 5, 3, 1, 2 },
                { 2, 4, 1, 8, 7, 9, 5, 3, 6 },
                { 8, 7, 9, 3, 5, 6, 4, 2, 1 },
                { 3, 5, 6, 2, 4, 1, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 6, 5, 3, 9, 8, 7, 4, 2, 1 },
                { 9, 7, 8, 1, 2, 4, 5, 3, 6 },
                { 1, 4, 2, 6, 3, 5, 7, 8, 9 },
                { 3, 1, 5, 4, 6, 2, 8, 9, 7 },
                { 4, 2, 6, 7, 9, 8, 1, 5, 3 },
                { 7, 8, 9, 3, 5, 1, 2, 6, 4 },
                { 2, 3, 1, 5, 4, 6, 9, 7, 8 },
                { 8, 9, 7, 2, 1, 3, 6, 4, 5 },
                { 5, 6, 4, 8, 7, 9, 3, 1, 2 }
        });

        solutions.add(new int[][] {
                { 4, 6, 5, 7, 8, 9, 1, 2, 3 },
                { 1, 3, 2, 4, 5, 6, 7, 8, 9 },
                { 7, 9, 8, 1, 2, 3, 4, 5, 6 },
                { 8, 7, 9, 2, 1, 4, 3, 6, 5 },
                { 3, 5, 6, 8, 9, 7, 2, 1, 4 },
                { 2, 4, 1, 3, 6, 5, 8, 9, 7 },
                { 9, 8, 7, 5, 3, 1, 6, 4, 2 },
                { 6, 2, 4, 9, 7, 8, 5, 3, 1 },
                { 5, 1, 3, 6, 4, 2, 9, 7, 8 }
        });

        solutions.add(new int[][] {
                { 3, 1, 5, 6, 2, 4, 7, 9, 8 },
                { 4, 2, 6, 9, 8, 7, 3, 5, 1 },
                { 7, 8, 9, 5, 1, 3, 4, 6, 2 },
                { 8, 9, 7, 1, 3, 2, 5, 4, 6 },
                { 2, 3, 1, 4, 6, 5, 8, 7, 9 },
                { 5, 6, 4, 7, 9, 8, 2, 1, 3 },
                { 1, 4, 2, 3, 5, 6, 9, 8, 7 },
                { 9, 7, 8, 2, 4, 1, 6, 3, 5 },
                { 6, 5, 3, 8, 7, 9, 1, 2, 4 }
        });

        solutions.add(new int[][] {
                { 1, 3, 2, 8, 9, 7, 6, 4, 5 },
                { 7, 9, 8, 5, 6, 4, 3, 1, 2 },
                { 4, 6, 5, 2, 3, 1, 9, 7, 8 },
                { 6, 2, 4, 3, 1, 5, 8, 9, 7 },
                { 5, 1, 3, 7, 8, 9, 2, 6, 4 },
                { 9, 8, 7, 4, 2, 6, 1, 5, 3 },
                { 8, 7, 9, 6, 5, 3, 4, 2, 1 },
                { 2, 4, 1, 9, 7, 8, 5, 3, 6 },
                { 3, 5, 6, 1, 4, 2, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 5, 6, 4, 7, 8, 9, 2, 3, 1 },
                { 2, 3, 1, 4, 5, 6, 8, 9, 7 },
                { 8, 9, 7, 1, 2, 3, 5, 6, 4 },
                { 6, 5, 3, 8, 9, 7, 1, 4, 2 },
                { 9, 7, 8, 2, 1, 4, 6, 5, 3 },
                { 1, 4, 2, 3, 6, 5, 9, 7, 8 },
                { 7, 8, 9, 5, 3, 1, 4, 2, 6 },
                { 3, 1, 5, 6, 4, 2, 7, 8, 9 },
                { 4, 2, 6, 9, 7, 8, 3, 1, 5 }
        });

        solutions.add(new int[][] {
                { 3, 1, 2, 5, 4, 6, 8, 7, 9 },
                { 9, 7, 8, 2, 1, 3, 5, 4, 6 },
                { 6, 4, 5, 8, 7, 9, 2, 1, 3 },
                { 8, 9, 7, 3, 5, 1, 4, 6, 2 },
                { 2, 6, 4, 7, 9, 8, 3, 5, 1 },
                { 1, 5, 3, 4, 6, 2, 7, 9, 8 },
                { 4, 2, 1, 6, 3, 5, 9, 8, 7 },
                { 7, 8, 9, 1, 2, 4, 6, 3, 5 },
                { 5, 3, 6, 9, 8, 7, 1, 2, 4 }
        });
        solutions.add(new int[][] {
                { 8, 9, 7, 4, 6, 5, 3, 2, 1 },
                { 5, 6, 4, 1, 3, 2, 9, 8, 7 },
                { 2, 3, 1, 7, 9, 8, 6, 5, 4 },
                { 7, 8, 9, 6, 2, 4, 1, 3, 5 },
                { 4, 2, 6, 5, 1, 3, 8, 7, 9 },
                { 3, 1, 5, 9, 8, 7, 2, 4, 6 },
                { 9, 7, 8, 3, 5, 6, 4, 1, 2 },
                { 6, 5, 3, 2, 4, 1, 7, 9, 8 },
                { 1, 4, 2, 8, 7, 9, 5, 6, 3 }
        });
        solutions.add(new int[][] {
                { 8, 7, 9, 5, 1, 3, 4, 6, 2 },
                { 2, 4, 6, 9, 8, 7, 3, 5, 1 },
                { 1, 3, 5, 6, 2, 4, 7, 9, 8 },
                { 4, 1, 2, 3, 5, 6, 9, 8, 7 },
                { 7, 9, 8, 2, 4, 1, 6, 3, 5 },
                { 5, 6, 3, 8, 7, 9, 1, 2, 4 },
                { 6, 5, 4, 7, 9, 8, 2, 1, 3 },
                { 9, 8, 7, 1, 3, 2, 5, 4, 6 },
                { 3, 2, 1, 4, 6, 5, 8, 7, 9 }
        });
        solutions.add(new int[][] {
                { 5, 6, 4, 1, 2, 3, 8, 7, 9 },
                { 2, 3, 1, 7, 8, 9, 5, 4, 6 },
                { 8, 9, 7, 4, 5, 6, 2, 1, 3 },
                { 6, 5, 3, 2, 1, 4, 9, 8, 7 },
                { 1, 4, 2, 8, 9, 7, 6, 3, 5 },
                { 9, 7, 8, 3, 6, 5, 1, 2, 4 },
                { 3, 1, 5, 9, 7, 8, 4, 6, 2 },
                { 4, 2, 6, 5, 3, 1, 7, 9, 8 },
                { 7, 8, 9, 6, 4, 2, 3, 5, 1 }
        });
        solutions.add(new int[][] {
                { 2, 1, 3, 8, 7, 9, 5, 6, 4 },
                { 5, 4, 6, 2, 1, 3, 8, 9, 7 },
                { 8, 7, 9, 5, 4, 6, 2, 3, 1 },
                { 9, 8, 7, 6, 3, 5, 1, 4, 2 },
                { 1, 2, 4, 9, 8, 7, 6, 5, 3 },
                { 6, 3, 5, 1, 2, 4, 9, 7, 8 },
                { 7, 9, 8, 4, 6, 2, 3, 1, 5 },
                { 4, 6, 2, 3, 5, 1, 7, 8, 9 },
                { 3, 5, 1, 7, 9, 8, 4, 2, 6 }
        });
        solutions.add(new int[][] {
                { 6, 5, 4, 2, 3, 1, 8, 7, 9 },
                { 9, 8, 7, 5, 6, 4, 2, 1, 3 },
                { 3, 2, 1, 8, 9, 7, 5, 4, 6 },
                { 5, 6, 3, 1, 4, 2, 9, 8, 7 },
                { 4, 1, 2, 9, 7, 8, 6, 3, 5 },
                { 7, 9, 8, 6, 5, 3, 1, 2, 4 },
                { 8, 7, 9, 4, 2, 6, 3, 5, 1 },
                { 1, 3, 5, 7, 8, 9, 4, 6, 2 },
                { 2, 4, 6, 3, 1, 5, 7, 9, 8 }
        });
        solutions.add(new int[][] {
                { 8, 7, 9, 1, 3, 2, 6, 4, 5 },
                { 2, 1, 3, 4, 6, 5, 9, 7, 8 },
                { 5, 4, 6, 7, 9, 8, 3, 1, 2 },
                { 3, 5, 1, 6, 2, 4, 8, 9, 7 },
                { 4, 6, 2, 9, 8, 7, 1, 5, 3 },
                { 7, 9, 8, 5, 1, 3, 2, 6, 4 },
                { 9, 8, 7, 2, 4, 1, 5, 3, 6 },
                { 1, 2, 4, 3, 5, 6, 7, 8, 9 },
                { 6, 3, 5, 8, 7, 9, 4, 2, 1 }
        });
        solutions.add(new int[][] {
                { 8, 7, 9, 6, 2, 4, 1, 5, 3 },
                { 1, 3, 5, 9, 8, 7, 2, 6, 4 },
                { 2, 4, 6, 5, 1, 3, 8, 9, 7 },
                { 7, 9, 8, 3, 5, 6, 4, 2, 1 },
                { 4, 1, 2, 8, 7, 9, 5, 3, 6 },
                { 5, 6, 3, 2, 4, 1, 7, 8, 9 },
                { 6, 5, 4, 1, 3, 2, 9, 7, 8 },
                { 3, 2, 1, 7, 9, 8, 6, 4, 5 },
                { 9, 8, 7, 4, 6, 5, 3, 1, 2 }
        });
        solutions.add(new int[][] {
                { 9, 8, 7, 3, 2, 1, 4, 6, 5 },
                { 3, 2, 1, 6, 5, 4, 7, 9, 8 },
                { 6, 5, 4, 9, 8, 7, 1, 3, 2 },
                { 8, 7, 9, 1, 3, 5, 6, 2, 4 },
                { 2, 4, 6, 8, 7, 9, 5, 1, 3 },
                { 1, 3, 5, 2, 4, 6, 9, 8, 7 },
                { 4, 1, 2, 5, 6, 3, 8, 7, 9 },
                { 5, 6, 3, 7, 9, 8, 2, 4, 1 },
                { 7, 9, 8, 4, 1, 2, 3, 5, 6 }
        });
        solutions.add(new int[][] {
                { 3, 6, 5, 9, 8, 7, 4, 1, 2 },
                { 2, 1, 4, 6, 3, 5, 7, 9, 8 },
                { 8, 9, 7, 1, 2, 4, 5, 6, 3 },
                { 9, 7, 8, 3, 5, 1, 2, 4, 6 },
                { 6, 4, 2, 7, 9, 8, 1, 3, 5 },
                { 5, 3, 1, 4, 6, 2, 8, 7, 9 },
                { 4, 5, 6, 8, 7, 9, 3, 2, 1 },
                { 7, 8, 9, 2, 1, 3, 6, 5, 4 },
                { 1, 2, 3, 5, 4, 6, 9, 8, 7 }
        });

        solutions.add(new int[][] {
                { 7, 8, 9, 1, 3, 5, 2, 6, 4 },
                { 3, 1, 5, 2, 4, 6, 8, 9, 7 },
                { 4, 2, 6, 8, 7, 9, 1, 5, 3 },
                { 5, 6, 4, 9, 8, 7, 3, 1, 2 },
                { 8, 9, 7, 3, 2, 1, 6, 4, 5 },
                { 2, 3, 1, 6, 5, 4, 9, 7, 8 },
                { 6, 5, 3, 7, 9, 8, 4, 2, 1 },
                { 9, 7, 8, 4, 1, 2, 5, 3, 6 },
                { 1, 4, 2, 5, 6, 3, 7, 8, 9 }
        });

        solutions.add(new int[][] {
                { 8, 7, 9, 4, 1, 2, 6, 5, 3 },
                { 2, 4, 1, 5, 6, 3, 9, 7, 8 },
                { 3, 5, 6, 7, 9, 8, 1, 4, 2 },
                { 7, 9, 8, 3, 2, 1, 5, 6, 4 },
                { 1, 3, 2, 6, 5, 4, 8, 9, 7 },
                { 4, 6, 5, 9, 8, 7, 2, 3, 1 },
                { 9, 8, 7, 1, 3, 5, 4, 2, 6 },
                { 5, 1, 3, 2, 4, 6, 7, 8, 9 },
                { 6, 2, 4, 8, 7, 9, 3, 1, 5 }
        });

        solutions.add(new int[][] {
                { 5, 6, 3, 4, 2, 1, 8, 7, 9 },
                { 7, 9, 8, 5, 3, 6, 2, 4, 1 },
                { 4, 1, 2, 7, 8, 9, 3, 5, 6 },
                { 9, 8, 7, 6, 4, 5, 1, 3, 2 },
                { 3, 2, 1, 9, 7, 8, 4, 6, 5 },
                { 6, 5, 4, 3, 1, 2, 7, 9, 8 },
                { 2, 4, 6, 1, 5, 3, 9, 8, 7 },
                { 1, 3, 5, 8, 9, 7, 6, 2, 4 },
                { 8, 7, 9, 2, 6, 4, 5, 1, 3 }
        });

        solutions.add(new int[][] {
                { 9, 7, 8, 4, 6, 5, 1, 3, 2 },
                { 3, 1, 2, 7, 9, 8, 4, 6, 5 },
                { 6, 4, 5, 1, 3, 2, 7, 9, 8 },
                { 2, 6, 4, 5, 1, 3, 9, 8, 7 },
                { 8, 9, 7, 6, 2, 4, 5, 1, 3 },
                { 1, 5, 3, 9, 8, 7, 6, 2, 4 },
                { 7, 8, 9, 3, 5, 6, 2, 4, 1 },
                { 5, 3, 6, 2, 4, 1, 8, 7, 9 },
                { 4, 2, 1, 8, 7, 9, 3, 5, 6 }
        });

        solutions.add(new int[][] {
                { 6, 2, 4, 7, 9, 8, 1, 3, 5 },
                { 5, 1, 3, 4, 6, 2, 8, 7, 9 },
                { 9, 8, 7, 3, 5, 1, 2, 4, 6 },
                { 1, 3, 2, 5, 4, 6, 9, 8, 7 },
                { 4, 6, 5, 8, 7, 9, 3, 2, 1 },
                { 7, 9, 8, 2, 1, 3, 6, 5, 4 },
                { 8, 7, 9, 1, 2, 4, 5, 6, 3 },
                { 2, 4, 1, 6, 3, 5, 7, 9, 8 },
                { 3, 5, 6, 9, 8, 7, 4, 1, 2 }
        });

        return solutions;
    }

    public static boolean validateSolution(int[][] result, int[][] expected) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (result[i][j] != expected[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }

    private static void printBoard(int[][] board) {
        System.out.println();
        for (int row = 0; row < 9; row++) {
            if ((row % 3 == 0) && (row != 0)) {
                System.out.println("-----------------------------");
            }
            for (int col = 0; col < 9; col++) {
                if ((col % 3 == 0) && (col != 0)) {
                    System.out.print("|");
                }
                final int cellValue = board[row][col];
                System.out.print(" ");
                if (cellValue == 0) {
                    System.out.print(" ");
                } else {
                    System.out.print(cellValue);
                }
                System.out.print(" ");
            }
            System.out.println();
        }
        System.out.println();
    }

    private static boolean isNumberInRow(int[][] board, int number, int row) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == number) {
                return true;
            }
        }
        return false;
    }

    private static boolean isNumberInColumn(int[][] board, int number, int column) {
        for (int i = 0; i < 9; i++) {
            if (board[i][column] == number) {
                return true;
            }
        }
        return false;
    }

    private static boolean isNumberInBox(int[][] board, int number, int row, int column) {
        int localBoxRow = row - row % 3;
        int localBoxColumn = column - column % 3;

        for (int i = localBoxRow; i < localBoxRow + 3; i++) {
            for (int j = localBoxColumn; j < localBoxColumn + 3; j++) {
                if (board[i][j] == number) {
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean isValidPlacement(int[][] board, int number, int row, int column) {
        return !isNumberInRow(board, number, row) &&
                !isNumberInColumn(board, number, column) &&
                !isNumberInBox(board, number, row, column);
    }

    private static boolean solveBoard(int[][] board) {
        for (int row = 0; row < 9; row++) {
            for (int column = 0; column < 9; column++) {
                if (board[row][column] == 0) {
                    for (int numberToTry = 1; numberToTry <= 9; numberToTry++) {
                        if (isValidPlacement(board, numberToTry, row, column)) {
                            board[row][column] = numberToTry;

                            if (solveBoard(board)) {
                                return true;
                            } else {
                                board[row][column] = 0;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
}